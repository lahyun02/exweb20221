<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace는 현재 파일에 정의된 SQL문 집합의 고유한 이름 -->
<!-- 보통은 SQL문을 실행할 Dao 인터페이스 이름으로 설정 -->
<mapper namespace="com.exam.member.MemberDao">

<!-- 어떤 컬럼의 값을 어떤 변수에 저장할것인지 정의 -->
<!-- com.exam.member.MemberVo 객체의  -->
	<resultMap type="com.exam.member.MemberVo" id="memberMap"> <!-- resultMap의 type에도 typeAliases 별명으로 써도 되고 안써도 됨. -->
		<!-- memId 속성(변수, 필드)에 mem_id 컬럼 값을 저장 -->
		<!-- PK컬럼은 result 태그 대신 id 태그를 사용. (result태그써도 기능에 큰 상관은없지만, 조인할때 등 id태그로 알려주면 좋음. -->
		<id property="memId" column="mem_id" />
		<result property="memPass" column="mem_pass" />
		<result property="memName" column="mem_name" />
		<result property="memPoint" column="mem_point" />
	</resultMap>
	<!-- 특징: 스네이크표기법(_표기법)을 낙타표기법으로 바꾼다. -->
	
<!-- SQL문의 종류와 동일한 이름의 태그를 사용하여 SQL문을 등록 -->
<!-- id는 파일 내에서 현재 SQL문의 고유한 이름  -->
<!-- 보통은 SQL문을 실행할 Dao 인터페이스의 메서드 이름으로 설정(스프링에서 사용하면 자동완성의 편리함이 있기때문) -->

<!-- SQL문 실행 결과 1개의 레코드를 담을 객체의 클래스명을 resultType 속성에 지정 -->
<!-- 줄 값이 있을 떈 (insert문) parameterType 속성 -->

<!-- 마이바티스는 기본적으로 resultType객체의 컬럼이름과 동일한 변수(속성, 필드)에 컬럼의 값을 저장 -->
<!-- 1. 컬럼이름이 변수이름과 같아지도록 select문 내에 alisa(별칭)을 붙여줌. sql문에서 as는 생략 가능.-->
<!-- 2. resultMap으로 어떤 컬럼의 값을 어떤 변수에 담을지 정의-->
<!-- 3. 스네이크 표기법을 낙타표기법으로 바꿔서 매핑해줌(mybatis-config.xml에서 설정)-->
  <select id="selectMemberList" resultType="MemberVo">  <!-- typeAliases를 선언해서 이렇게 짧게 줄여써도 됨. -->
  <!-- <select id="selectMemberList" resultType="com.exam.member.MemberVo"> -->
  <!-- <select id="selectMemberList" resultMap="memberMap"> -->
    <!-- SELECT mem_id memId, mem_pass memPass, mem_name memName, mem_point memPoint FROM member -->
    SELECT mem_id, mem_name, mem_point FROM member
  </select>
  
  <select id="selectMember" parameterType="string" resultType="MemberVo">  <!-- typeAliases를 선언해서 이렇게 짧게 줄여써도 됨. -->
    SELECT mem_id, mem_name, mem_point FROM member WHERE mem_id = #{memId}
  </select>
  
  <!-- select는 우리에게 돌아오는 데이터가 있지만, insert, delete, update는 우리에게 돌아오는 데이터가 없고, 우리가 값을 줘야 한다. -->
  <insert id="insertMember" parameterType="MemberVo">
<!--   <insert id="insertMember" parameterType="com.exam.member.MemberVo"> -->
  	INSERT INTO member 
	(mem_id, mem_pass, mem_name, mem_point)
	VALUES (#{memId}, #{memPass}, #{memName}, #{memPoint}) 
  </insert>
  <!-- #{} 는 ?를 만들고 거기에 값을 채워넣는 것, ${}는 "+"(문자열 이어붙이기) 임-> 보안적 측면에서 사용x (해커가 이상한sql문을 넣을수있음.) -->
	
  <update id="updateMember" parameterType="MemberVo">
  	UPDATE member 
	SET mem_name=#{memName}, mem_point=#{memPoint}
	WHERE mem_id=#{memId}
  </update>
	
	
	<!-- delete문에 String타입값을 인자로 줘야 하므로 String.-->
	<!-- 마이바티스에서 이미java.lang.String을 string으로 별명을 이미 붙여놔서 string으로 쓰면 됨. 공식사이트-매퍼설정-typeAliases -->
  <delete id="delMember" parameterType="string">
	<!-- 단일값을 갖는 파라미터를 받은 경우에는 속성(변수)이름이 무의미. #{}안에 아무렇게나 써도 상관없음. 
	보통 단일값이라는 의미의 value를 쓰거나 값의 의미를 나타내려고 의미에 맞는 이름을 작성. 뭐라고 쓰든 기능과는 관계없음.-->
  	DELETE FROM member WHERE mem_id = #{memId}
  </delete>
  
  <select id="selectLoginMember" parameterType="MemberVo" resultType="MemberVo"> 
    SELECT mem_id, mem_name, mem_point FROM member 
    WHERE mem_id = #{memId} and mem_pass = #{memPass}
  </select> 
  
<!-- mybatis에 parameterType은 생략 가능. 에러 안남. 명시적으로 써주는 것 권장.-->

</mapper>

